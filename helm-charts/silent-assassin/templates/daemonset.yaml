apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-client
  labels:
    chart: {{ .Release.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-client"
      version: {{ .Values.version | quote }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-client"
        version: {{ .Values.version | quote }}
    spec:
      # Necessary to hit the node's metadata server when using Workload Identity
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: {{ .Release.Name }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.imageConfig.image }}
          command: ["/bin/sh"]
          args: ["-c", "cd /layers/golang/app/; ./silent-assassin start client"]
          imagePullPolicy: {{ .Values.imageConfig.pullPolicy }}
          {{- if .Values.daemonset.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.daemonset.livenessProbe.path }}
              port: {{ .Values.daemonset.containerPort }}
            initialDelaySeconds: {{ .Values.daemonset.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.daemonset.livenessProbe.periodSeconds}}
          {{- end }}
          {{- if .Values.daemonset.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.daemonset.readinessProbe.path }}
              port: {{ .Values.daemonset.containerPort }}
            initialDelaySeconds: {{ .Values.daemonset.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.daemonset.readinessProbe.periodSeconds }}
          {{- end }}
          {{- if .Values.daemonset.resources }}
          resources:
            requests:
              cpu: {{ .Values.daemonset.resources.requests.cpu }}
              memory: {{ .Values.daemonset.resources.requests.memory }}
            limits:
              cpu: {{ .Values.daemonset.resources.limits.cpu }}
              memory: {{ .Values.daemonset.resources.limits.memory }}
          {{- end }}
          volumeMounts:
            - mountPath: /layers/golang/app/config
              name: configuration
      volumes:
        - name: configuration
          configMap:
            name: {{ .Release.Name }}-config
        {{- if not .Values.workloadIdentityServiceAccount.enabled }}
        - name: gcp-service-account-secret
          secret:
            secretName: {{ .Release.Name }}
        {{- end }}
      nodeSelector:
        "cloud.google.com/gke-preemptible": "true"