apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-client
  labels:
    chart: {{ .Release.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app: {{ .Release.Name }}
    team: {{ .Values.team }}
spec:
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-client"
      version: {{ .Values.version | quote }}
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-client"
        version: {{ .Values.version | quote }}
        team: {{ .Values.team }}
    spec:
      # Necessary to hit the node's metadata server when using Workload Identity
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: {{ .Release.Name }}
      initContainers:
        - name: install
          image: hashicorp/consul-template:0.20.0-alpine
          env:
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: vault-secret
                  key: token
          args:
            - "-consul-addr"
            - "{{ .Values.consul.host}}:{{ .Values.consul.port}}"
            - "-vault-addr"
            - "{{.Values.vault.host}}:{{.Values.vault.port}}"
            - "-template"
            - "/usr/app/templates/application.yaml:/layers/golang/app/config/.silent-assassin.yaml"
            - "-once"
            - "-log-level=trace"
          volumeMounts:
            - mountPath: /usr/app/templates
              name: config-template-volume
            - mountPath: /layers/golang/app/config
              name: config-pv-volume
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image }}
          command: ["/bin/sh"]
          args: ["-c", "cd /layers/golang/app/; ./silent-assassin startClient"]
          imagePullPolicy: {{ .Values.imageConfig.pullPolicy }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.containerPort }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds}}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.containerPort }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.containerPort }}
              name: http
              protocol: TCP
          {{- if .Values.resources }}
          resources:
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
          {{- end }}
          env:
            - name: RAPIDO_ENV
              value: {{ .Values.environment }}
            {{- if not .Values.workloadIdentityServiceAccount.enabled }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /gcp-service-account/service-account-key.json
            {{- end }}
          volumeMounts:
            - mountPath: /layers/golang/app/config
              name: config-pv-volume
          {{- if not .Values.workloadIdentityServiceAccount.enabled }}
            - name: gcp-service-account-secret
              mountPath: /gcp-service-account
          {{- end }}
      volumes:
        - name: config-pv-volume
          emptyDir: {}
        - name: config-template-volume
          configMap:
            name: {{ .Release.Name }}-config
        {{- if not .Values.workloadIdentityServiceAccount.enabled }}
        - name: gcp-service-account-secret
          secret:
            secretName: {{ .Release.Name }}
        {{- end }}
      nodeSelector:
        "cloud.google.com/gke-preemptible": "true"
      tolerations:
      # this toleration is to have the daemonset runnable on master nodes
      # remove it if your masters can't run pods
      - key: node-role.kubernetes.io/master
        effect: NoSchedule